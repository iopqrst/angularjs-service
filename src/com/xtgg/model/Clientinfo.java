package com.xtgg.model;

import java.util.ArrayList;
import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.xtgg.model.base.BaseClientinfo;
import com.xtgg.utils.DateUtils;
import com.xtgg.utils.QueryCondition;
import com.xtgg.utils.StringUtils;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Clientinfo extends BaseClientinfo<Clientinfo> {
	public static final Clientinfo dao = new Clientinfo();

	public Record load(Integer id) {
		return Db
				.findFirst(
						"select * from t_clientinfo where status = ? and id = ?",
						0, id);
	}

	public Page<Record> queryObject(int pageNumber, int pageSize,
			Clientinfo ci, QueryCondition queryCondition) {

		String sqlPrefix = "SELECT tc.id, tc.gender, tc.age, tc.type, tc.account, tc. NAME userName, tc.mobile, tc.areaId, tc.email,"
				+ " tc.levelId, tc.bazzaarGrade, tc.createTime, tc.finishPercent, tc.principalId , tc.availableProduct ,"
				+ " te.lastFollowTime, te.lastUploadDateTime, te.source, te.flag, te.passivityinvite ";

		String sqlSuffix = " FROM t_clientinfo tc RIGHT JOIN ( select DISTINCT(clientId) clientId from "
				+ " t_client_vs_user z where (z.createUserChain like '500,1%' )) tm  on tc.id = tm.clientId "
				+ " left JOIN t_client_extend te on tc.id = te.clientId where tc.status = 0";

		List args = new ArrayList();

		if (null != ci) {
			if (ci.getId() != null) {
				sqlSuffix += " and tc.id = ?";
				args.add(ci.getId());
			}
			if (!StringUtils.isEmpty(ci.getName())) {
				sqlSuffix += " and tc.name like ?";
				args.add("%" + ci.getName().trim() + "%");
			}

			if (!StringUtils.isEmpty(ci.getMobile())
					&& !ci.getMobile().contains(",")) {
				sqlSuffix += " and tc.mobile = ?";
				args.add(ci.getMobile().trim());
			}

			if (!StringUtils.isEmpty(ci.getMobile())
					&& ci.getMobile().contains(",")) {
				String[] mobiles = ci.getMobile().split(",");

				String tempSql = " and (";

				for (int i = 0; i < mobiles.length; i++) {
					tempSql += " tc.mobile = ?";

					args.add(mobiles[i]);

					if (i != mobiles.length - 1) {
						tempSql += " or";
					}
				}

				tempSql += ")";

				sqlSuffix += tempSql;
			}

			if (!StringUtils.isEmpty(ci.getType())) {
				sqlSuffix += " and tc.type = ?";
				args.add(ci.getType());
			}

			if (null != queryCondition) {
				if (null != queryCondition.getBeginTime()) {
					sqlSuffix += " and tc.createTime >= ?";
					args.add(queryCondition.getBeginTime());
				}

				if (null != queryCondition.getEndTime()) {
					sqlSuffix += " and tc.createTime <= ?";
					args.add(DateUtils.getAppointDate(
							queryCondition.getEndTime(), 1));
				}
			}
			if (!StringUtils.isEmpty(ci.getAvailableProduct())) {
				sqlSuffix += " and tc.availableProduct like ?";
				args.add("%" + ci.getAvailableProduct() + "%");
			}

			if (queryCondition != null
					&& !StringUtils.isEmpty(queryCondition
							.getBazzaarGradeQuery())) {
				String bazz = queryCondition.getBazzaarGradeQuery();
				String[] bazzStr = bazz.split(",");
				sqlSuffix += " and (";
				if (bazzStr.length > 1) {
					for (int i = 0; i < bazzStr.length; i++) {
						sqlSuffix += " tc.bazzaarGrade like ?";

						args.add("%" + bazzStr[i] + "%");

						if (i != bazzStr.length - 1) {
							sqlSuffix += " or";
						}
					}
				} else {
					sqlSuffix += " tc.bazzaarGrade like ?";
					args.add("%" + bazzStr[0] + "%");
				}
				sqlSuffix += ")";
			}
		}

		sqlSuffix += " order by tc.id desc";

		return Db.paginate(pageNumber, pageSize, sqlPrefix, sqlSuffix);
	}
}
